# ГЛОБАЛЬНАЯ БЛОКИРОВКА ИНТЕРПРЕТАТОРА
# ---GIL--- GLOBAL INTERPRETATOR LOCK

# Это штука, которая не позволяет выполняться нескольким потокам на одном ядре
# В целом, защищает интерпретатор от разрушения

# сpu bound program

from threading import Thread
import time


def count(n):
    while n > 0:
        n -= 1


# series run
t0 = time.time()
# дважды запускаем нашу функцию, чтобы посмотреть, скольку времени будет
# выполняться
# Это запуск в одном потоке
count(100_000_000)
count(100_000_000)
print(time.time() - t0)

# parallel run
t0 = time.time()
# Выполнить в потоке функцию count с аргументов 100_000_000
# Это запуск в двух потоках
th1 = Thread(target=count, args=(100_000_000,))
th2 = Thread(target=count, args=(100_000_000,))

th1.start()
th2.start()

th1.join()
th2.join()

print(time.time() - t0)

# В итоге, параллельно высление выполнялось даже
# Это как раз работа GIL
# Т.к. один поток, блокирует
# Если мы пишем программу, где основная нагрузка ложится на процессоы, то
# лучше выполнять в одном потоке
# Если мы пишем программу, где основная нагрузка ложится на память, то лучше
# выполнять в разных потоках
